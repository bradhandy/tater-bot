plugins {
    id 'org.springframework.boot' version '2.0.6.RELEASE' apply true
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'antlr'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

group 'net.jack-of-all-trades'
version '1.0-SNAPSHOT'

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://dl.bintray.com/mockito/maven" }
}

bootJar {
    launchScript()
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter', 'junit-vintage'
    }

    failFast = true
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
    }
}

idea {
    project {
        languageLevel = '1.8'
    }
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

// we want the visitor pattern classes generated.
generateGrammarSource {
    arguments += ["-visitor"]
}

dependencyManagement {
    
    // mockito is the only library with a direct dependency on this, and it wants 1.8.13.  I'm not sure
    // from where the earlier dependency is resolved.  We'll set this specifically to 1.8.13.  Any time
    // Mockito upgraded, comment this dependency management entry to find the new required version of
    // byte-buddy.
    dependencies {
        dependencySet(group: 'net.bytebuddy', version: '1.8.10') {
            entry "byte-buddy"
            entry "byte-buddy-agent"
        }
    }

    // Ordering is important.  If the aws-java-sdk-bom is first, then the spring cloud framework will override the
    // version with an older version.
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-aws:2.0.1.RELEASE"
        mavenBom "com.amazonaws:aws-java-sdk-bom:1.11.431"
    }
}

dependencies {
    antlr 'org.antlr:antlr4:4.7.1'

    compile("com.linecorp.bot:line-bot-spring-boot:2.1.0") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-jdbc") {
        exclude group: 'com.zaxxer', module: 'HikariCP'
    }
    compile("org.springframework.cloud:spring-cloud-starter-aws")

    compile("org.slf4j:slf4j-api:1.7.25")

    runtime("org.postgresql:postgresql:42.2.2")
    runtime("org.apache.tomcat:tomcat-jdbc")
    runtime("ch.qos.logback:logback-classic:1.2.3")

    runtime("org.liquibase:liquibase-core")

    testCompile("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.mockito', module: 'mockito-core'
    }
    testCompile("org.springframework.boot:spring-boot-starter-webflux")

    testCompile("org.mockito:mockito-core:2.19.6")
    testCompile("org.mockito:mockito-junit-jupiter:2.19.6")
    testCompile("org.junit.jupiter:junit-jupiter-api:5.3.0")
    testCompile("org.junit.jupiter:junit-jupiter-params:5.3.0")
    testCompile("org.junit.vintage:junit-vintage-engine:5.3.0")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.0")

    // this is used to verify the liquibase functionality against a database.
    testRuntime("com.h2database:h2:1.4.197")
}
